// ========================================
// DONULAND MANAGEMENT SYSTEM - OPRAVEN√ù APP.JS
// Krok 1: Z√°kladn√≠ inicializace bez chyb
// ========================================

// Glob√°ln√≠ stav aplikace - jednoduch√Ω a ƒçist√Ω
window.donulandApp = {
    isInitialized: false,
    data: {
        historicalData: [],
        isLoading: false,
        lastDataLoad: null
    },
    config: {
        DONUT_COST: 32,
        DONUT_PRICE: 50,
        FRANCHISE_PRICE: 52,
        HOURLY_WAGE: 150,
        WORK_HOURS: 10,
        FUEL_COST_PER_KM: 15,
        BASE_CITY: 'Praha',
        DEBUG: true
    }
};

// Zjednodu≈°en√© logov√°n√≠
function log(message, ...args) {
    if (window.donulandApp.config.DEBUG) {
        console.log('[DONULAND]', message, ...args);
    }
}

function logError(message, ...args) {
    console.error('[DONULAND ERROR]', message, ...args);
}

// Hlavn√≠ inicializace
document.addEventListener('DOMContentLoaded', function() {
    log('üöÄ Spou≈°t√≠m Donuland Management System...');
    
    // Mal√© zpo≈ædƒõn√≠ pro naƒçten√≠ v≈°ech zdroj≈Ø
    setTimeout(initializeApp, 200);
});

// Bezpeƒçn√° inicializace aplikace
function initializeApp() {
    try {
        log('üì± Inicializuji aplikaci...');
        
        // 1. Kontrola existence z√°kladn√≠ch element≈Ø
        if (!checkRequiredElements()) {
            throw new Error('Chybƒõj√≠c√≠ HTML elementy');
        }
        
        // 2. Skryt√≠ loading screen a zobrazen√≠ aplikace
        showMainApp();
        
        // 3. Nastaven√≠ z√°kladn√≠ch event listener≈Ø
        setupBasicEvents();
        
        // 4. Nastaven√≠ v√Ωchoz√≠ch hodnot
        setDefaultValues();
        
        // 5. Inicializace navigace
        initNavigation();
        
        // Oznaƒçen√≠ jako inicializov√°no
        window.donulandApp.isInitialized = true;
        
        log('‚úÖ Aplikace √∫spƒõ≈°nƒõ inicializov√°na');
        showNotification('üç© Donuland Management System je p≈ôipraven!', 'success');
        
    } catch (error) {
        logError('‚ùå Chyba p≈ôi inicializaci:', error);
        showCriticalError(error);
    }
}

// Kontrola existence po≈æadovan√Ωch element≈Ø
function checkRequiredElements() {
    const required = ['loadingScreen', 'mainApp', 'statusIndicator'];
    const missing = required.filter(id => !document.getElementById(id));
    
    if (missing.length > 0) {
        logError('Chybƒõj√≠c√≠ elementy:', missing);
        return false;
    }
    
    return true;
}

// Zobrazen√≠ hlavn√≠ aplikace
function showMainApp() {
    const loadingScreen = document.getElementById('loadingScreen');
    const mainApp = document.getElementById('mainApp');
    
    if (loadingScreen) {
        loadingScreen.style.display = 'none';
    }
    
    if (mainApp) {
        mainApp.style.display = 'block';
    }
    
    log('üëÅÔ∏è Aplikace zobrazena');
}

// Z√°kladn√≠ event listenery
function setupBasicEvents() {
    log('üîó Nastavuji z√°kladn√≠ event listenery...');
    
    // Glob√°ln√≠ error handler
    window.addEventListener('error', (event) => {
        logError('Neoƒçek√°van√° chyba:', event.error);
        showNotification('‚ö†Ô∏è Do≈°lo k chybƒõ. Zkuste obnovit str√°nku.', 'warning');
    });
    
    // Formul√°≈ôov√© prvky - pokud existuj√≠
    const formFields = [
        'eventName', 'eventCategory', 'eventCity', 'eventDate',
        'expectedVisitors', 'competition', 'businessModel', 'rentType'
    ];
    
    formFields.forEach(fieldId => {
        const element = document.getElementById(fieldId);
        if (element) {
            element.addEventListener('change', () => {
                log(`Zmƒõna v poli: ${fieldId}`);
                // Zde bude pozdƒõji logika pro predikci
            });
        }
    });
}

// Nastaven√≠ v√Ωchoz√≠ch hodnot
function setDefaultValues() {
    log('‚öôÔ∏è Nastavuji v√Ωchoz√≠ hodnoty...');
    
    // Datum - z√≠tra
    const dateInput = document.getElementById('eventDate');
    if (dateInput && !dateInput.value) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        dateInput.value = tomorrow.toISOString().split('T')[0];
        dateInput.min = new Date().toISOString().split('T')[0];
    }
    
    // Cena donutu
    const priceInput = document.getElementById('donutPrice');
    if (priceInput && !priceInput.value) {
        priceInput.value = window.donulandApp.config.DONUT_PRICE;
    }
    
    // D√©lka akce
    const durationSelect = document.getElementById('eventDuration');
    if (durationSelect && !durationSelect.value) {
        durationSelect.value = '1';
    }
    
    // Status indik√°tor
    updateStatusIndicator('offline', '≈Ω√°dn√° data');
}

// Inicializace navigace
function initNavigation() {
    log('üß≠ Inicializuji navigaci...');
    
    // Glob√°ln√≠ funkce pro p≈ôep√≠n√°n√≠ sekc√≠
    window.showSection = function(sectionId) {
        log('üìã P≈ôep√≠n√°m na sekci:', sectionId);
        
        // Skryt√≠ v≈°ech sekc√≠
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        
        // Zobrazen√≠ vybran√© sekce
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        // Aktualizace navigace
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
            
            // Kontrola onclick atributu
            const onclick = item.getAttribute('onclick');
            if (onclick && onclick.includes(`'${sectionId}'`)) {
                item.classList.add('active');
            }
        });
    };
    
    // Glob√°ln√≠ funkce pro naƒçten√≠ dat
    window.loadDataFromSheets = async function(sheetsUrl) {
        if (!sheetsUrl) {
            sheetsUrl = document.getElementById('googleSheetsUrl')?.value;
        }
        
        if (!sheetsUrl) {
            showNotification('‚ùå Zadejte URL Google Sheets', 'error');
            return;
        }
        
        try {
            log('üìä Naƒç√≠t√°m data z Google Sheets...');
            showNotification('üîÑ Naƒç√≠t√°m data...', 'info');
            updateStatusIndicator('loading', 'Naƒç√≠t√°m...');
            
            // Zde bude pozdƒõji implementov√°no naƒç√≠t√°n√≠ dat
            await new Promise(resolve => setTimeout(resolve, 2000)); // Simulace
            
            showNotification('‚úÖ Data naƒçtena (simulace)', 'success');
            updateStatusIndicator('online', 'Simulace dat');
            
        } catch (error) {
            logError('Chyba p≈ôi naƒç√≠t√°n√≠ dat:', error);
            showNotification(`‚ùå Chyba: ${error.message}`, 'error');
            updateStatusIndicator('error', 'Chyba');
        }
    };
}

// Aktualizace status indik√°toru
function updateStatusIndicator(status, message) {
    const indicator = document.getElementById('statusIndicator');
    if (!indicator) return;
    
    // Odstranƒõn√≠ star√Ωch t≈ô√≠d
    indicator.classList.remove('online', 'error', 'loading');
    
    // P≈ôid√°n√≠ nov√© t≈ô√≠dy
    if (status !== 'offline') {
        indicator.classList.add(status);
    }
    
    // Aktualizace textu
    const textSpan = indicator.querySelector('span:last-child');
    if (textSpan) {
        textSpan.textContent = message;
    }
    
    log(`üìä Status: ${status} - ${message}`);
}

// Zobrazen√≠ notifikace
function showNotification(message, type = 'info') {
    log(`üì¢ Notifikace [${type}]: ${message}`);
    
    const container = document.getElementById('notificationContainer');
    if (!container) {
        // Fallback na console pokud nen√≠ kontejner
        console.log(`[${type.toUpperCase()}] ${message}`);
        return;
    }
    
    // Odstranƒõn√≠ existuj√≠c√≠ch notifikac√≠
    container.innerHTML = '';
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icons = {
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'info': '‚ÑπÔ∏è'
    };
    
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${icons[type] || '‚ÑπÔ∏è'}</span>
            <span class="notification-text">${message}</span>
            <span class="notification-close" onclick="this.parentElement.parentElement.remove()">‚úï</span>
        </div>
    `;
    
    container.appendChild(notification);
    
    // Animace zobrazen√≠
    setTimeout(() => notification.classList.add('show'), 100);
    
    // Auto odstranƒõn√≠ po 5 sekund√°ch
    setTimeout(() => {
        if (notification.parentElement) {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// Zobrazen√≠ kritick√© chyby
function showCriticalError(error) {
    const errorHTML = `
        <div style="
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            display: flex; align-items: center; justify-content: center;
            z-index: 10000; color: white; font-family: sans-serif;
        ">
            <div style="text-align: center; max-width: 500px; padding: 40px;">
                <div style="font-size: 4em; margin-bottom: 20px;">üí•</div>
                <h1>Kritick√° chyba aplikace</h1>
                <p style="margin: 20px 0;">Do≈°lo k neoƒçek√°van√© chybƒõ p≈ôi inicializaci.</p>
                <div style="background: rgba(0,0,0,0.2); padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <code>${error.message}</code>
                </div>
                <button onclick="location.reload()" style="
                    background: white; color: #ff6b6b; border: none;
                    padding: 15px 30px; border-radius: 8px; font-weight: bold; cursor: pointer;
                ">üîÑ Obnovit str√°nku</button>
            </div>
        </div>
    `;
    
    document.body.innerHTML = errorHTML;
}

log('üìú App.js naƒçten a p≈ôipraven k inicializaci');
