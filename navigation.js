// ========================================
// DONULAND MANAGEMENT SYSTEM - NAVIGATION
// Navigaƒçn√≠ syst√©m aplikace
// ========================================

const navigation = {
    // Zobrazen√≠ konkr√©tn√≠ sekce
    showSection(sectionId) {
        debug('üìã Zobrazuji sekci:', sectionId);
        
        // Skryt√≠ v≈°ech sekc√≠
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        
        // Zobrazen√≠ c√≠lov√© sekce
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        } else {
            debugError('Sekce nenalezena:', sectionId);
            return;
        }
        
        // Aktivn√≠ stav navigace
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // Najdeme a aktivujeme odpov√≠daj√≠c√≠ navigaƒçn√≠ polo≈æku
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            const onclick = item.getAttribute('onclick');
            if (onclick && onclick.includes(`'${sectionId}'`)) {
                item.classList.add('active');
            }
        });
        
        // Naƒçten√≠ dat pro konkr√©tn√≠ sekci
        this.loadSectionData(sectionId);
        
        // Aktualizace URL hash (voliteln√©)
        window.location.hash = sectionId;
    },

    // Naƒçten√≠ dat pro konkr√©tn√≠ sekci
    loadSectionData(sectionId) {
        switch(sectionId) {
            case 'prediction':
                // Predikce - ≈æ√°dn√© speci√°ln√≠ naƒç√≠t√°n√≠
                this.initializePredictionSection();
                break;
                
            case 'analysis':
                // Anal√Ωza - naƒçten√≠ dat pokud jsou k dispozici
                if (globalData.historicalData.length > 0) {
                    analysis.loadAnalysisData();
                } else {
                    ui.showLoading('overallStats', 'Naƒç√≠t√°n√≠ dat...');
                    // Pokus o automatick√© naƒçten√≠ dat
                    dataManager.loadData().then(() => {
                        analysis.loadAnalysisData();
                    }).catch(() => {
                        analysis.loadAnalysisData(); // Zobraz√≠ chybovou zpr√°vu
                    });
                }
                break;
                
            case 'calendar':
                // Kalend√°≈ô - naƒçten√≠ dat pokud jsou k dispozici
                if (globalData.historicalData.length > 0) {
                    analysis.loadCalendarData();
                } else {
                    ui.showLoading('upcomingEvents', 'Naƒç√≠t√°n√≠ dat...');
                    ui.showLoading('recentEvents', 'Naƒç√≠t√°n√≠ dat...');
                    // Pokus o automatick√© naƒçten√≠ dat
                    dataManager.loadData().then(() => {
                        analysis.loadCalendarData();
                    }).catch(() => {
                        analysis.loadCalendarData(); // Zobraz√≠ chybovou zpr√°vu
                    });
                }
                break;
                
            case 'settings':
                // Nastaven√≠ - ≈æ√°dn√© speci√°ln√≠ naƒç√≠t√°n√≠
                break;
                
            default:
                debugWarn('Nezn√°m√° sekce:', sectionId);
        }
    },

    // Inicializace sekce predikce
    initializePredictionSection() {
        // Nastaven√≠ v√Ωchoz√≠ch hodnot pokud nejsou nastaveny
        this.setDefaultFormValues();
        
        // Kontrola, zda m√°me data pro autocomplete
        if (globalData.historicalData.length === 0) {
            debug('üîÑ Automaticky naƒç√≠t√°m data pro autocomplete...');
            dataManager.loadData().catch(error => {
                debugWarn('Nepoda≈ôilo se naƒç√≠st data pro autocomplete:', error);
            });
        }
    },

    // Nastaven√≠ v√Ωchoz√≠ch hodnot formul√°≈ôe
    setDefaultFormValues() {
        // Nastaven√≠ z√≠t≈ôej≈°√≠ho data pokud nen√≠ nastaveno
        const dateInput = document.getElementById('eventDate');
        if (dateInput && !dateInput.value) {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const tomorrowStr = tomorrow.toISOString().split('T')[0];
            dateInput.value = tomorrowStr;
            
            // Nastaven√≠ minim√°ln√≠ho data na dnes
            const today = new Date().toISOString().split('T')[0];
            dateInput.min = today;
        }

        // Nastaven√≠ v√Ωchoz√≠ ceny donutu pokud nen√≠ nastavena
        const priceInput = document.getElementById('donutPrice');
        if (priceInput && !priceInput.value) {
            priceInput.value = CONFIG.DONUT_PRICE;
        }

        // Nastaven√≠ v√Ωchoz√≠ d√©lky akce
        const durationSelect = document.getElementById('eventDuration');
        if (durationSelect && !durationSelect.value) {
            durationSelect.value = '1';
        }
    },

    // Kontrola zmƒõn v formul√°≈ôi a automatick√© ukl√°d√°n√≠
    setupFormAutoSave() {
        const formElements = [
            'eventName', 'eventCategory', 'eventCity', 'eventDate',
            'expectedVisitors', 'eventDuration', 'competition',
            'businessModel', 'rentType', 'donutPrice'
        ];

        formElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                // Debounced funkce pro automatick√© ukl√°d√°n√≠
                const debouncedSave = utils.debounce(() => {
                    this.saveFormData();
                }, 1000);

                element.addEventListener('input', debouncedSave);
                element.addEventListener('change', debouncedSave);
            }
        });
    },

    // Ulo≈æen√≠ dat formul√°≈ôe do localStorage
    saveFormData() {
        try {
            const formData = {
                eventName: document.getElementById('eventName').value,
                eventCategory: document.getElementById('eventCategory').value,
                eventCity: document.getElementById('eventCity').value,
                eventDate: document.getElementById('eventDate').value,
                expectedVisitors: document.getElementById('expectedVisitors').value,
                eventDuration: document.getElementById('eventDuration').value,
                competition: document.getElementById('competition').value,
                businessModel: document.getElementById('businessModel').value,
                rentType: document.getElementById('rentType').value,
                donutPrice: document.getElementById('donutPrice').value,
                timestamp: Date.now()
            };

            utils.setWithTTL('donuland_form_data', formData, 24 * 60 * 60 * 1000); // 24 hodin
            debug('üíæ Data formul√°≈ôe automaticky ulo≈æena');

        } catch (error) {
            debugWarn('Chyba p≈ôi automatick√©m ukl√°d√°n√≠:', error);
        }
    },

    // Naƒçten√≠ dat formul√°≈ôe z localStorage
    loadFormData() {
        try {
            const formData = utils.getWithTTL('donuland_form_data');
            if (!formData) return;

            // Obnoven√≠ hodnot pokud jsou elementy pr√°zdn√©
            Object.entries(formData).forEach(([key, value]) => {
                if (key === 'timestamp') return;
                
                const element = document.getElementById(key);
                if (element && !element.value && value) {
                    element.value = value;
                    
                    // Trigger change event pro aktualizaci UI
                    element.dispatchEvent(new Event('change'));
                }
            });

            debug('üîÑ Data formul√°≈ôe obnovena z cache');

        } catch (error) {
            debugWarn('Chyba p≈ôi naƒç√≠t√°n√≠ dat formul√°≈ôe:', error);
        }
    },

    // Navigace pomoc√≠ kl√°vesov√Ωch zkratek
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (event) => {
            // Ctrl/Cmd + ƒç√≠slo pro p≈ôep√≠n√°n√≠ sekc√≠
            if ((event.ctrlKey || event.metaKey) && !event.shiftKey && !event.altKey) {
                switch(event.key) {
                    case '1':
                        event.preventDefault();
                        this.showSection('prediction');
                        break;
                    case '2':
                        event.preventDefault();
                        this.showSection('analysis');
                        break;
                    case '3':
                        event.preventDefault();
                        this.showSection('calendar');
                        break;
                    case '4':
                        event.preventDefault();
                        this.showSection('settings');
                        break;
                    case 'r':
                        // Ctrl+R pro refresh dat
                        event.preventDefault();
                        dataManager.refreshData();
                        break;
                    case 's':
                        // Ctrl+S pro ulo≈æen√≠ predikce
                        event.preventDefault();
                        if (document.getElementById('prediction').classList.contains('active')) {
                            predictor.savePrediction();
                        }
                        break;
                }
            }

            // Escape pro zav≈ôen√≠ notifikac√≠
            if (event.key === 'Escape') {
                document.querySelectorAll('.notification').forEach(notification => {
                    notification.remove();
                });
            }
        });

        debug('‚å®Ô∏è Kl√°vesov√© zkratky aktivov√°ny');
    },

    // Breadcrumbs navigace
    updateBreadcrumbs(sectionId) {
        const breadcrumbMap = {
            'prediction': ['üè† Hlavn√≠', 'ü§ñ AI Predikce'],
            'analysis': ['üè† Hlavn√≠', 'üìä Anal√Ωza akc√≠'],
            'calendar': ['üè† Hlavn√≠', 'üìÖ Kalend√°≈ô akc√≠'],
            'settings': ['üè† Hlavn√≠', '‚öôÔ∏è Nastaven√≠']
        };

        const breadcrumbs = breadcrumbMap[sectionId] || ['üè† Hlavn√≠'];
        
        // Aktualizace title str√°nky
        document.title = `${breadcrumbs[breadcrumbs.length - 1]} - Donuland Management System`;
    },

    // Detekce zmƒõn v URL hash
    setupHashNavigation() {
        window.addEventListener('hashchange', () => {
            const hash = window.location.hash.substring(1);
            if (hash && ['prediction', 'analysis', 'calendar', 'settings'].includes(hash)) {
                this.showSection(hash);
            }
        });

        // Naƒçten√≠ sekce podle hash p≈ôi startu
        const initialHash = window.location.hash.substring(1);
        if (initialHash && ['prediction', 'analysis', 'calendar', 'settings'].includes(initialHash)) {
            // Delay pro zaji≈°tƒõn√≠, ≈æe DOM je p≈ôipraven
            setTimeout(() => {
                this.showSection(initialHash);
            }, 100);
        }
    },

    // Mobile responsive menu
    setupMobileMenu() {
        // Na mobiln√≠ch za≈ô√≠zen√≠ch p≈ôid√°me tlaƒç√≠tko pro toggle menu
        if (window.innerWidth <= 768) {
            const sidebar = document.querySelector('.sidebar');
            if (sidebar) {
                sidebar.style.display = 'none';
                
                // P≈ôid√°n√≠ mobile menu button do headeru
                const headerControls = document.querySelector('.header-controls');
                if (headerControls) {
                    const menuButton = document.createElement('button');
                    menuButton.className = 'btn btn-secondary mobile-menu-toggle';
                    menuButton.innerHTML = 'üì± Menu';
                    menuButton.onclick = () => {
                        const isVisible = sidebar.style.display !== 'none';
                        sidebar.style.display = isVisible ? 'none' : 'block';
                        menuButton.innerHTML = isVisible ? 'üì± Menu' : '‚úï Zav≈ô√≠t';
                    };
                    
                    headerControls.insertBefore(menuButton, headerControls.firstChild);
                }
            }
        }
    },

    // Inicializace navigaƒçn√≠ho syst√©mu
    init() {
        debug('üß≠ Inicializuji navigaƒçn√≠ syst√©m...');
        
        // Nastaven√≠ v√Ωchoz√≠ch hodnot
        this.setDefaultFormValues();
        
        // Naƒçten√≠ ulo≈æen√Ωch dat formul√°≈ôe
        this.loadFormData();
        
        // Nastaven√≠ auto-save
        this.setupFormAutoSave();
        
        // Kl√°vesov√© zkratky
        this.setupKeyboardShortcuts();
        
        // Hash navigace
        this.setupHashNavigation();
        
        // Mobile menu
        this.setupMobileMenu();
        
        debug('‚úÖ Navigaƒçn√≠ syst√©m inicializov√°n');
    }
};
